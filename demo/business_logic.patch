diff --git a/pkg/apis/example/v1alpha1/boundeddeployment_types.go b/pkg/apis/example/v1alpha1/boundeddeployment_types.go
index 6922dcd..f417b21 100644
--- a/pkg/apis/example/v1alpha1/boundeddeployment_types.go
+++ b/pkg/apis/example/v1alpha1/boundeddeployment_types.go
@@ -26,6 +26,8 @@ import (
 type BoundedDeploymentSpec struct {
 	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
 	// Important: Run "make" to regenerate code after modifying this file
+	// +optional
+	Replicas *int32 `json:"replicas,omitempty"`
 }
 
 // BoundedDeploymentStatus defines the observed state of BoundedDeployment
diff --git a/pkg/controller/boundeddeployment/boundeddeployment_controller.go b/pkg/controller/boundeddeployment/boundeddeployment_controller.go
index bf0abfb..5510944 100644
--- a/pkg/controller/boundeddeployment/boundeddeployment_controller.go
+++ b/pkg/controller/boundeddeployment/boundeddeployment_controller.go
@@ -18,7 +18,6 @@ package boundeddeployment
 import (
 	"context"
 	"log"
-	"reflect"
 
 	examplev1alpha1 "github.com/mengqiy/kubebuilder-demo/pkg/apis/example/v1alpha1"
 	appsv1 "k8s.io/api/apps/v1"
@@ -117,6 +116,7 @@ func (r *ReconcileBoundedDeployment) Reconcile(request reconcile.Request) (recon
 			Namespace: instance.Namespace,
 		},
 		Spec: appsv1.DeploymentSpec{
+			Replicas: instance.Spec.Replicas,
 			Selector: &metav1.LabelSelector{
 				MatchLabels: map[string]string{"deployment": instance.Name + "-deployment"},
 			},
@@ -153,8 +153,8 @@ func (r *ReconcileBoundedDeployment) Reconcile(request reconcile.Request) (recon
 
 	// TODO(user): Change this for the object type created by your controller
 	// Update the found object and write the result back if there are any changes
-	if !reflect.DeepEqual(deploy.Spec, found.Spec) {
-		found.Spec = deploy.Spec
+	if instance.Spec.Replicas != nil && *instance.Spec.Replicas != *found.Spec.Replicas {
+		found.Spec.Replicas = instance.Spec.Replicas
 		log.Printf("Updating Deployment %s/%s\n", deploy.Namespace, deploy.Name)
 		err = r.Update(context.TODO(), found)
 		if err != nil {
diff --git a/pkg/controller/boundeddeployment/boundeddeployment_controller_test.go b/pkg/controller/boundeddeployment/boundeddeployment_controller_test.go
index 91a4c5d..f1e95d4 100644
--- a/pkg/controller/boundeddeployment/boundeddeployment_controller_test.go
+++ b/pkg/controller/boundeddeployment/boundeddeployment_controller_test.go
@@ -79,8 +79,4 @@ func TestReconcile(t *testing.T) {
 	g.Eventually(requests, timeout).Should(gomega.Receive(gomega.Equal(expectedRequest)))
 	g.Eventually(func() error { return c.Get(context.TODO(), depKey, deploy) }, timeout).
 		Should(gomega.Succeed())
-
-	// Manually delete Deployment since GC isn't enabled in the test control plane
-	g.Expect(c.Delete(context.TODO(), deploy)).To(gomega.Succeed())
-
 }
diff --git a/pkg/webhook/default_server/boundeddeployments/mutating/boundeddeployments_create_update_handler.go b/pkg/webhook/default_server/boundeddeployments/mutating/boundeddeployments_create_update_handler.go
index 4ea753d..99bdb78 100644
--- a/pkg/webhook/default_server/boundeddeployments/mutating/boundeddeployments_create_update_handler.go
+++ b/pkg/webhook/default_server/boundeddeployments/mutating/boundeddeployments_create_update_handler.go
@@ -43,6 +43,14 @@ type BoundedDeploymentCreateUpdateHandler struct {
 
 func (h *BoundedDeploymentCreateUpdateHandler) mutatingBoundedDeploymentFn(ctx context.Context, obj *examplev1alpha1.BoundedDeployment) error {
 	// TODO(user): implement your admission logic
+	if obj.Spec.Replicas == nil {
+		two := int32(2)
+		obj.Spec.Replicas = &two
+	} else if *obj.Spec.Replicas < 2 {
+		*obj.Spec.Replicas = 2
+	} else if *obj.Spec.Replicas > 3 {
+		*obj.Spec.Replicas = 3
+	}
 	return nil
 }
 
